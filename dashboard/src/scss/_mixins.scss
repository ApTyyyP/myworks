@import "typography";
@import "config";

@mixin adaptiveFont($pcSize, $mobSize) {
  //$addSize: $pcSize - $mobSize;
  //$container-width: $container-width - 320px;
  //font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$container-width}));
  $addSize: $pcSize - $mobSize;
  $addMobSize: $addSize +$addSize * 0.7;

  @include mq($min: md) {
    font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$container-width}));
  }

  @include mq($min: xs, $max: md) {
    font-size: calc(#{$mobSize + px} + #{$addMobSize} * ((100vw - 320px) / #{$container-width}));
  }
}

/**
  USAGE:

  @include adaptiveFont(72, 12);

 */

/**
 *	Media query mixin for writing Mobile First
 */

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $container-width-padding, $widthTo: $page-min-width, $keepSize: 0) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }

  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom ==$container-width and $container-width ==0) {
    $widthFrom: $container-max-width;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;

  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }

  $flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

  // Получение значения свойства
  $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

  // Если отрицательные значения
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
  }

  // Если поддерживается clamp();
  @supports (#{$property}: $propertyValue) {
    #{$property}: $propertyValue;
  }

  // Если не поддерживается clamp();
  @supports not (#{$property}: $propertyValue) {
    #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
  }

  // Устанавливаем значения по-умолчанию
  @if $widthFrom  !=$container-width-padding and $widthFrom  !=$container-max-width and $keepSize  !=1 and $keepSize  !=2 {
    @media (min-width: $widthFromMedia) {
      #{$property}: inherit;
    }
  }

  @if $widthTo  !=$page-min-width and $keepSize  !=1 and $keepSize  !=3 {
    @media (max-width: $widthToMedia) {
      #{$property}: inherit;
    }
  }
}

/**
  USAGE:

  @include adaptiveValue("padding-top", 60, 10);

 */

@function convertBreakpointKeyToValue($breakpoint) {

  @if map-has-key($breakpoints, $breakpoint) {
    @return map-get($breakpoints, $breakpoint);
  }

  @warn "Unknown breakpoint: `#{$breakpoint}` in $breakpoints. ";
  @return null;
}

@mixin mq($min: null, $max: null) {
  $query: "all" !default;

  // Try to convert $min value if not number or null
  @if(type-of($min) !=number and $min  !=null) {
    $min: convertBreakpointKeyToValue($min);
  }

  // Try to convert $max value if not number or null
  @if(type-of($max) !=number and $max  !=null) {
    $max: convertBreakpointKeyToValue($max);
  }

  // set both min and max
  @if ($min  !=null and $max  !=null) {
    $query: "(min-width: #{$min}px) and (max-width: #{$max - 1}px)";
  }

  // set just min
  @else if ($min  !=null and $max ==null) {
    $query: "(min-width: #{$min}px)";
  }

  // set just max
  @else if ($min ==null and $max  !=null) {
    $query: "(max-width: #{$max - 1}px)";
  }

  @media screen and #{$query} {
    @content;
  }
}

/**
  USAGE:

  @include mq($min: $md) {
    width: 100%;
  }

  @include mq($max: $md) {
    width: 100%;
  }

  @include mq($min: xs, $max: md) {
    width: 100%;
  }

 */

@function palette($palette, $level: 'base') {
  @if map-has-key($palettes, $palette) {
    @if map-has-key(map-get($palettes, $palette), $level) {
      @return map-get(map-get($palettes, $palette), $level);
    }

    // Color level not found, so set base as $level to prevent an error
    @warn "Unknown level `#{$level}` for color `#{$palette}` in $palette.";
    @return deeppink
  }

  @warn "Unknown color: `#{$palette}` in $palette. ";
  @return hotpink;
}

/**
 *	A simple function for accessing the colors from our mapping
 *	To access colors in our palette, we use a very simple custom Sass function

  USAGE:

  a {
    color: palette(primary);

    &:hover {
      color: palette(primary, 400);
    }
  }

 */

@mixin font-family($family: 'base') {
  @if map-has-key($font-families, $family) {
    font-family: map-get($font-families, $family);
  }

  @else {
    @warn "Unknown family: `#{$family}` in $font-families. ";
    font-family: map-get($font-families, system);
  }
}

/**
 *	A simple function for accessing the font families from our mapping

  USAGE:

  span {
    @include font-family(base);
  }

 */

@function strip-unit($number) {
  @if type-of($number)=='number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Percent
@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}

// REM
@function rem($px) {
  $result: math.div($px, 16)+rem;
  @return $result;
}

// EM
@function em($px, $current: 16) {
  $result: math.div($px, $current)+em;
  @return $result;
}

/* Check if value is number */
@function is-number($value) {
  @return type-of($value)=='number';
}

/* Value to Em */
@function valueToRem($value) {
  $noUnits: strip-unit($value);
  @return #{calc($noUnits / 16) * 1rem};
}

@mixin font-size($size) {
  @if map-get($font-sizes, $size) {
    @include font-size(map-get($font-sizes, $size));
  }

  // When mapping isn't found calculate as if PX-value was given and return REM value
  @else {
    @if is-number($size) {
      font-size: valueToRem($size);
    }

    @else {
      @warn " `#{$size}` is not a valid value. It must be one of the following: `#{$font-sizes}`";
    }
  }
}

/**
 *  Mixin for setting font-size in REM through a Sass Map with all available sizes

    USAGE:

    .myClass {
        @include font-size(l-small);
    }

 */

/**
 *  Calculate line-height ratio from font-size and line-height in px value
 */

@mixin line-height-ratio($font-size, $lh) {
  line-height: calc($lh / map-get($font-sizes, $font-size));
}

@mixin font($size, $lh: null, $weight: null) {
  @include font-size($size);

  @if $lh {
    @include line-height-ratio($size, $lh);
  }

  @if $weight {
    font-weight: $weight;
  }
}
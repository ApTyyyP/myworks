import { useEffect, useState } from 'react';
import NumberDisplay from './NumberDisplay';
import NumberButtons from './NumberButtons';
import PlayerPanel from './PlayerPanel';
import GameResult from './GameResult';

function GuessNumber() {
  const [mysteriousNumber, setMysteriousNumber] = useState('');
  const [guessedNumbers, setGuessedNumbers] = useState([]);
  const [allEnteredNumbers, setAllEnteredNumbers] = useState([]);
  const [currentPlayer, setCurrentPlayer] = useState(1);
  const [playerMove, setPlayerMove] = useState({ 1: [], 2: [] });
  const [isGameOver, setIsGameOver] = useState(false);

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ç—Ä–∏—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —á–∏—Å–ª–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤
  const generateNumbers = () => {
    let result = '';

    while (result.length < 3) {
      const number = Math.floor(Math.random() * 10).toString();
      if (!result.includes(number)) result += number;
    }

    return result;
  };

  // –í–∏–∫–æ–Ω—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –≥—Ä–∏
  useEffect(() => {
    setMysteriousNumber(generateNumbers());
  }, []);

  // –•—ñ–¥ –≥—Ä–∞–≤—Ü—è (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ —Ü–∏—Ñ—Ä—É)
  const handleMove = (number) => {
    if (isGameOver || allEnteredNumbers.includes(number)) return;

    const isCorrect = mysteriousNumber.includes(number);
    const newGuessed = isCorrect ? [...guessedNumbers, number] : guessedNumbers;

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ö–æ–¥—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
    const updatedMoves = { ...playerMove };
    updatedMoves[currentPlayer].push(number);

    setAllEnteredNumbers([...allEnteredNumbers, number]);
    setGuessedNumbers(newGuessed);
    setPlayerMove(updatedMoves);

    // –Ø–∫—â–æ –≤—Å—ñ 3 —Ü–∏—Ñ—Ä–∏ –≤–≥–∞–¥–∞–Ω—ñ ‚Äî –≥—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è
    if (newGuessed.length === 3) {
      setIsGameOver(true);
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
      setCurrentPlayer(currentPlayer === 1 ? 2 : 1);
    }
  };

  // –ù–æ–≤–∞ –≥—Ä–∞ ‚Äî —Å–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
  const handleRestart = () => {
    setMysteriousNumber(generateNumbers());
    setGuessedNumbers([]);
    setAllEnteredNumbers([]);
    setCurrentPlayer(1);
    setPlayerMove({ 1: [], 2: [] });
    setIsGameOver(false);
  };

  return (
    <div className="mt-5">
      <h1 className="text-center mb-4">üéØ –ì—Ä–∞: –í–≥–∞–¥–∞–π —á–∏—Å–ª–æ</h1>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏ —ñ –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞ –≥—Ä–∞" */}
      {isGameOver && (
        <GameResult currentPlayer={currentPlayer} onRestart={handleRestart} />
      )}

      {/* –í–∏–≤—ñ–¥ —á–∏—Å–ª–∞ */}
      <NumberDisplay number={mysteriousNumber} guessed={guessedNumbers} />

      {/* –ü–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å */}
      <h2 className="text-center text-primary">–ì—Ä–∞–≤–µ—Ü—å: {currentPlayer}</h2>

      {/* –ö–Ω–æ–ø–∫–∏ –∑ —Ü–∏—Ñ—Ä–∞–º–∏ */}
      <NumberButtons
        onClick={handleMove}
        disabledNumbers={allEnteredNumbers}
        guessedNumbers={guessedNumbers}
        targetNumber={mysteriousNumber}
        isGameOver={isGameOver}
      />

      {/* –ü–∞–Ω–µ–ª—å –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —ó—Ö–Ω—ñ–º–∏ —Ö–æ–¥–∞–º–∏ */}
      <div className="row">
        <div className="col-md-6 mb-3">
          <PlayerPanel
            player={1}
            moves={playerMove[1]}
            target={mysteriousNumber}
            isActive={!isGameOver && currentPlayer === 1}
            isLoser={isGameOver && currentPlayer === 1}
          />
        </div>

        <div className="col-md-6 mb-3">
          <PlayerPanel
            player={2}
            moves={playerMove[2]}
            target={mysteriousNumber}
            isActive={!isGameOver && currentPlayer === 2}
            isLoser={isGameOver && currentPlayer === 2}
          />
        </div>
      </div>
    </div>
  );
}

export default GuessNumber;
